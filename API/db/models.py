from sqlmodel import SQLModel, Field,Column
import sqlalchemy.dialects.postgresql as pg
from uuid import UUID, uuid4
from datetime import datetime

class Book(SQLModel, table = True):
    """
    This class represents a book in the database
    """
    __tablename__ = 'books' #type: ignore
    uid:UUID = Field(
        sa_column=Column(pg.UUID ,primary_key=True,
        unique=True, default=uuid4)
    )
    title:str
    author:str
    isbn:str
    description:str
    created_at: datetime = Field(sa_column=Column(pg.TIMESTAMP, default=datetime.now))
    updated_at:datetime = Field(sa_column=Column(pg.TIMESTAMP, default=datetime.now))

    def __repr__(self) -> str:
        return f"Book => {self.title}"

#==================================================

from typing import Optional
from sqlmodel import SQLModel, Field, Column
import sqlalchemy.dialects.postgresql as pg
from sqlalchemy import PrimaryKeyConstraint

# User table: email is the primary key.
class User(SQLModel, table=True):
    email: str = Field(sa_column=Column(pg.VARCHAR, primary_key=True, nullable=False))
    name: str = Field(sa_column=Column(pg.VARCHAR))
    prepared_jobs: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT))
    cv: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT))

# Match table: links a user's email to a job url with an associated score.
# Composite primary key on (email, url).
class Match(SQLModel, table=True):
    email: str = Field(sa_column=Column(pg.VARCHAR, nullable=False))
    url: str = Field(sa_column=Column(pg.VARCHAR, nullable=False))
    score: float = Field(sa_column=Column(pg.FLOAT))
    __table_args__ = (PrimaryKeyConstraint("email", "url"),)

# Company table: stores company name and the user's email.
# Composite primary key on (name, email) ensures uniqueness.
class Company(SQLModel, table=True):
    name: str = Field(sa_column=Column(pg.VARCHAR, nullable=False))
    email: str = Field(sa_column=Column(pg.VARCHAR, nullable=False))
    __table_args__ = (PrimaryKeyConstraint("name", "email"),)

# Job table: generated by your database client.
class Job(SQLModel, table=True):
    job_link: str = Field(sa_column=Column(pg.TEXT, primary_key=True, nullable=False))
    job_title: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT))
    company: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT))
    job_summary: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT))
    job_skills: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT))
    job_location: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT))

# Information table: provided example.
class Information(SQLModel, table=True):
    info_link: str = Field(sa_column=Column(pg.VARCHAR, primary_key=True))
    info_title: str = Field(default=None, sa_column=Column(pg.VARCHAR))
    content: Optional[str] = Field(default=None, sa_column=Column(pg.TEXT, nullable=True))

# Career table: links a user's email to a job url.
# Composite primary key on (email, url)
class Career(SQLModel, table=True):
    email: str = Field(sa_column=Column(pg.VARCHAR, nullable=False))
    url: str = Field(sa_column=Column(pg.VARCHAR, nullable=False))
    __table_args__ = (PrimaryKeyConstraint("email", "url"),)
